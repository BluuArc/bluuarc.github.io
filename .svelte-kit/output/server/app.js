import {respond} from "@sveltejs/kit/ssr";
import {create_ssr_component, validate_component, missing_component, escape, compute_rest_props, spread, add_attribute, each, is_promise} from "svelte/internal";
import {setContext, afterUpdate, onMount, getContext, createEventDispatcher, beforeUpdate} from "svelte";
import {writable} from "svelte/store";
import relativeTime from "dayjs/plugin/relativeTime.js";
import dayjs from "dayjs";
var root_svelte_svelte_type_style_lang = "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}";
const css$4 = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\texport let props_3 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}>\\n\\t\\t\\t\\t\\t{#if components[3]}\\n\\t\\t\\t\\t\\t\\t<svelte:component this={components[3]} {...(props_3 || {})}/>\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t</svelte:component>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AA2DC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
const Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page: page2} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  let {props_3 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title || "untitled page";
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  if ($$props.props_3 === void 0 && $$bindings.props_3 && props_3 !== void 0)
    $$bindings.props_3(props_3);
  $$result.css.add(css$4);
  {
    stores.page.set(page2);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {
        default: () => `${components[3] ? `${validate_component(components[3] || missing_component, "svelte:component").$$render($$result, Object.assign(props_3 || {}), {}, {})}` : ``}`
      })}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1j55zn5"}">${navigated ? `${escape(title)}` : ``}</div>` : ``}`;
});
function set_paths(paths) {
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
const template = ({head, body}) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="/favicon.ico" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
let options = null;
function init(settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: "/./_app/start-ae41be4e.js",
      css: ["/./_app/assets/start-a8cd1609.css"],
      js: ["/./_app/start-ae41be4e.js", "/./_app/chunks/vendor-df840aab.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => "/./_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2) => {
      console.error(error2.stack);
      error2.stack = options.get_stack(error2);
    },
    hooks: get_hooks(user_hooks),
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    read: settings.read,
    root: Root,
    router: true,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
const empty = () => ({});
const manifest = {
  assets: [{"file": "favicon.ico", "size": 1150, "type": "image/vnd.microsoft.icon"}, {"file": "img/avatar-w600.jpg", "size": 45112, "type": "image/jpeg"}, {"file": "img/avatar.jpg", "size": 1779258, "type": "image/jpeg"}, {"file": "img/CAMP.CIRC.SM.WHT.PNG", "size": 18161, "type": "image/png"}, {"file": "img/evl.png", "size": 10406, "type": "image/png"}, {"file": "img/evllogo.png", "size": 31713, "type": "image/png"}, {"file": "img/GitHub-Mark-Light-120px-plus.png", "size": 4044, "type": "image/png"}, {"file": "img/GitHub-Mark-Light-32px.png", "size": 1571, "type": "image/png"}, {"file": "img/ic_email_white_48dp_2x.png", "size": 553, "type": "image/png"}, {"file": "img/In-White-128px-R.png", "size": 2340, "type": "image/png"}, {"file": "img/In-White-34px-R.png", "size": 1258, "type": "image/png"}, {"file": "img/old_sites/v001.PNG", "size": 44353, "type": "image/png"}, {"file": "img/old_sites/v002.PNG", "size": 354321, "type": "image/png"}, {"file": "img/old_sites/v003.PNG", "size": 404615, "type": "image/png"}, {"file": "img/old_sites/v004.PNG", "size": 252833, "type": "image/png"}, {"file": "post-metadata.json", "size": 891, "type": "application/json"}, {"file": "project-data.json", "size": 33188, "type": "application/json"}, {"file": "robots.txt", "size": 67, "type": "text/plain"}],
  layout: "src/routes/__layout.svelte",
  error: ".svelte-kit/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/__layout.svelte", "src/routes/posts/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/2017\/01\/my-first-site-v1\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/__layout.svelte", "src/routes/posts/2017/01/my-first-site-v1.svx"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/2017\/12\/the-spa-treatment-attempt-1\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/__layout.svelte", "src/routes/posts/2017/12/the-spa-treatment-attempt-1.svx"],
      b: [".svelte-kit/build/components/error.svelte"]
    }
  ]
};
const get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({request, render: render2}) => render2(request))
});
const module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout$1;
  }),
  ".svelte-kit/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/projects.svelte": () => Promise.resolve().then(function() {
    return projects;
  }),
  "src/routes/posts/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  "src/routes/posts/index.svelte": () => Promise.resolve().then(function() {
    return index;
  }),
  "src/routes/posts/2017/01/my-first-site-v1.svx": () => Promise.resolve().then(function() {
    return myFirstSiteV1;
  }),
  "src/routes/posts/2017/12/the-spa-treatment-attempt-1.svx": () => Promise.resolve().then(function() {
    return theSpaTreatmentAttempt1;
  })
};
const metadata_lookup = {"src/routes/__layout.svelte": {"entry": "/./_app/pages/__layout.svelte-4334a783.js", "css": ["/./_app/assets/pages/__layout.svelte-746c1503.css"], "js": ["/./_app/pages/__layout.svelte-4334a783.js", "/./_app/chunks/vendor-df840aab.js"], "styles": null}, ".svelte-kit/build/components/error.svelte": {"entry": "/./_app/error.svelte-2d58b62e.js", "css": [], "js": ["/./_app/error.svelte-2d58b62e.js", "/./_app/chunks/vendor-df840aab.js"], "styles": null}, "src/routes/index.svelte": {"entry": "/./_app/pages/index.svelte-43aa3a57.js", "css": ["/./_app/assets/DateTime-42555696.css", "/./_app/assets/LinkableHeader-e7a18f30.css"], "js": ["/./_app/pages/index.svelte-43aa3a57.js", "/./_app/chunks/vendor-df840aab.js", "/./_app/chunks/singletonGetters-ff01b479.js", "/./_app/chunks/ProjectList-edfcb33f.js", "/./_app/chunks/DateTime-99aa3d5e.js", "/./_app/chunks/LinkableHeader-1d1bb39d.js", "/./_app/chunks/PostList-3dd86d1e.js"], "styles": null}, "src/routes/projects.svelte": {"entry": "/./_app/pages/projects.svelte-c9cb26ec.js", "css": ["/./_app/assets/DateTime-42555696.css"], "js": ["/./_app/pages/projects.svelte-c9cb26ec.js", "/./_app/chunks/vendor-df840aab.js", "/./_app/chunks/singletonGetters-ff01b479.js", "/./_app/chunks/ProjectList-edfcb33f.js", "/./_app/chunks/DateTime-99aa3d5e.js"], "styles": null}, "src/routes/posts/__layout.svelte": {"entry": "/./_app/pages/posts/__layout.svelte-422c5c75.js", "css": [], "js": ["/./_app/pages/posts/__layout.svelte-422c5c75.js", "/./_app/chunks/vendor-df840aab.js"], "styles": null}, "src/routes/posts/index.svelte": {"entry": "/./_app/pages/posts/index.svelte-3f127c38.js", "css": ["/./_app/assets/DateTime-42555696.css"], "js": ["/./_app/pages/posts/index.svelte-3f127c38.js", "/./_app/chunks/vendor-df840aab.js", "/./_app/chunks/singletonGetters-ff01b479.js", "/./_app/chunks/PostList-3dd86d1e.js", "/./_app/chunks/DateTime-99aa3d5e.js"], "styles": null}, "src/routes/posts/2017/01/my-first-site-v1.svx": {"entry": "/./_app/pages/posts/2017/01/my-first-site-v1.svx-8f1ce380.js", "css": ["/./_app/assets/pages/posts/2017/01/my-first-site-v1.svx-4691ef58.css", "/./_app/assets/DateTime-42555696.css", "/./_app/assets/LinkableHeader-e7a18f30.css"], "js": ["/./_app/pages/posts/2017/01/my-first-site-v1.svx-8f1ce380.js", "/./_app/chunks/vendor-df840aab.js", "/./_app/chunks/DateTime-99aa3d5e.js", "/./_app/chunks/LinkableHeader-1d1bb39d.js", "/./_app/chunks/MetadataProcessor-e6515e9d.js"], "styles": null}, "src/routes/posts/2017/12/the-spa-treatment-attempt-1.svx": {"entry": "/./_app/pages/posts/2017/12/the-spa-treatment-attempt-1.svx-656da3bb.js", "css": ["/./_app/assets/pages/posts/2017/01/my-first-site-v1.svx-4691ef58.css", "/./_app/assets/DateTime-42555696.css", "/./_app/assets/LinkableHeader-e7a18f30.css"], "js": ["/./_app/pages/posts/2017/12/the-spa-treatment-attempt-1.svx-656da3bb.js", "/./_app/chunks/vendor-df840aab.js", "/./_app/chunks/DateTime-99aa3d5e.js", "/./_app/chunks/LinkableHeader-1d1bb39d.js", "/./_app/chunks/MetadataProcessor-e6515e9d.js"], "styles": null}};
async function load_component(file) {
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
init({paths: {"base": "", "assets": "/."}});
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return respond({...request, host}, options, {prerender});
}
var app = ':root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n\nh1, .header-1 {\n  display: block;\n  font-size: 2em;\n  margin-block-start: 0.67em;\n  margin-block-end: 0.67em;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  font-weight: bold;\n}\n\nh2, .header-2 {\n  display: block;\n  font-size: 1.5em;\n  margin-block-start: 0.83em;\n  margin-block-end: 0.83em;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  font-weight: bold;\n}\n\n.sr-only {\n  position: absolute;\n  left: -200vw;\n  top: auto;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n}';
const _layout$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<header><span class="${"header-1"}">JC.ME</span>
	<nav aria-labelledby="${"main-page-navigation-label"}"><span class="${"sr-only"}" id="${"main-page-navigation-label"}">Site Navigation</span>
		<ul><li><a href="${"/"}">Home</a>
			</li><li><a href="${"/projects"}">Projects</a>
			</li><li><a href="${"/posts"}">Posts</a></li></ul></nav></header>
${slots.default ? slots.default({}) : ``}
<footer><section><h2>Contact Information</h2>
		<address><ul><li><a href="${"mailto:joshua.castor@joshuacastor.me"}">Email</a></li>
				<li><a href="${"https://github.com/BluuArc"}">GitHub</a></li>
				<li><a href="${"https://www.linkedin.com/in/joshuacastor"}">LinkedIn</a></li>
				<li><a href="${"https://www.evl.uic.edu/entry.php?id=2302"}">Electronic Visualization Laboratory (EVL)</a></li></ul></address></section>
	<section><h2>Technologies Used</h2>
		<ul><li><a href="${"https://kit.svelte.dev/"}">SvelteKit</a> - web framework</li>
			<li><a href="${"https://pages.github.com/"}">GitHub Pages</a> - hosting</li></ul></section>
	<p>\xA9 2020-2021</p></footer>`;
});
var __layout$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout$1
});
function load$3({error: error2, status}) {
  return {props: {error: error2, status}};
}
const Error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {status} = $$props;
  let {error: error2} = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<h1>${escape(status)}</h1>

<p>${escape(error2.message)}</p>


${error2.stack ? `<pre>${escape(error2.stack)}</pre>` : ``}`;
});
var error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Error,
  load: load$3
});
const fetchMethodStore = writable(() => Promise.resolve({ok: false}));
let fetchMethod;
fetchMethodStore.subscribe((newFetchMethod) => {
  fetchMethod = newFetchMethod;
});
function getCurrentFetchMethod() {
  return fetchMethod;
}
const defaultLoadMethodForMethodStore = ({fetch}) => {
  fetchMethodStore.set(fetch);
  return {};
};
const KEYED_LOGGING_FUNCTIONS = [
  "info",
  "log",
  "error",
  "warn",
  "debug"
];
const DEFAULT_STYLING = "font-weight:bold;background:black;color:white;text-decoration:underline;";
const CREATE_SUB_LOGGER_METHOD_NAME = "createSubLogger";
const proxyMapping = new Map();
function getLogger(key, styling = DEFAULT_STYLING, targetConsoleObject = console) {
  let logger2 = proxyMapping.get(key);
  if (!logger2) {
    logger2 = new Proxy(targetConsoleObject, {
      get(obj, prop) {
        let result;
        if (prop === CREATE_SUB_LOGGER_METHOD_NAME) {
          result = (subKey, subStyling) => getLogger(`${key}.${subKey}`, subStyling || styling, targetConsoleObject);
        } else if (KEYED_LOGGING_FUNCTIONS.includes(prop)) {
          const originalFunction = obj[prop];
          result = originalFunction.bind(targetConsoleObject, `%c[${key}:${prop}]`, styling);
        } else {
          result = obj[prop];
        }
        return result;
      }
    });
    proxyMapping.set(key, logger2);
  }
  return logger2;
}
function createSingletonGetter(getter) {
  let instance;
  return (reload) => {
    if (reload || typeof instance === "undefined") {
      instance = getter();
    }
    return instance;
  };
}
function _getProjectDataAsync() {
  const logger2 = getLogger("projectData");
  const fetchMethod2 = getCurrentFetchMethod() || self.fetch;
  return fetchMethod2("/project-data.json").then((r) => r.ok ? r.json() : Promise.reject(r.statusText)).then((originalProjectData) => {
    logger2.debug({originalProjectData});
    const projects2 = {};
    const languageData = {};
    const ownershipData = {};
    const overall = {
      languages: [],
      ownership: [],
      count: {
        total: 0,
        mine: 0
      }
    };
    const projectDataAsEntries = Object.entries(originalProjectData);
    overall.count.total = projectDataAsEntries.length;
    projectDataAsEntries.forEach(([key, entry]) => {
      projects2[key] = entry;
      if (Array.isArray(entry.languages)) {
        entry.languages.forEach(({name, color, size}) => {
          if (!languageData[name]) {
            languageData[name] = {
              name,
              color,
              size: 0
            };
          }
          languageData[name].size += size;
        });
        if (!ownershipData[entry.owner]) {
          ownershipData[entry.owner] = 0;
        }
        ownershipData[entry.owner]++;
      } else {
        logger2.warn("no language data found in entry", entry);
      }
    });
    overall.languages = Object.values(languageData).sort((a, b) => b.size - a.size);
    overall.ownership = Object.entries(ownershipData).sort(([, countA], [, countB]) => countB - countA).map(([name, count]) => ({name, count}));
    overall.count.mine = (overall.ownership.find(({name}) => name === "BluuArc") || {}).count || 0;
    logger2.debug({projects: projects2, overall});
    return {
      projects: projects2,
      overall
    };
  }).catch((error2) => {
    logger2.error(error2);
    throw error2;
  });
}
const projectDataGetter = createSingletonGetter(_getProjectDataAsync);
function getProjectDataAsync() {
  return projectDataGetter();
}
const logger$1 = getLogger("DynamicLeveledHeader");
const DynamicLeveledHeader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["level"]);
  let {level = 2} = $$props;
  if ($$props.level === void 0 && $$bindings.level && level !== void 0)
    $$bindings.level(level);
  {
    {
      if (isNaN(level) || level < 1 || level > 6) {
        logger$1.warn(`header level [${level}] is not a number of is not between 1 and 6; rendering div instead`);
      }
    }
  }
  return `


${level === 1 ? `<h1${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h1>` : `${level === 2 ? `<h2${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h2>` : `${level === 3 ? `<h3${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h3>` : `${level === 4 ? `<h4${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h4>` : `${level === 5 ? `<h5${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h5>` : `${level === 6 ? `<h6${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</h6>` : `<div${spread([$$restProps])}>${slots.default ? slots.default({}) : ``}</div>`}`}`}`}`}`}`;
});
var LinkableHeader_svelte_svelte_type_style_lang = ".header-label.svelte-1rfue7t.svelte-1rfue7t{display:flex}.header-label.svelte-1rfue7t a.svelte-1rfue7t{align-self:center;margin-left:1em;color:transparent}.header-label.svelte-1rfue7t:hover a.svelte-1rfue7t,.header-label.svelte-1rfue7t a.svelte-1rfue7t:focus{color:unset}";
const css$3 = {
  code: ".header-label.svelte-1rfue7t.svelte-1rfue7t{display:flex}.header-label.svelte-1rfue7t a.svelte-1rfue7t{align-self:center;margin-left:1em;color:transparent}.header-label.svelte-1rfue7t:hover a.svelte-1rfue7t,.header-label.svelte-1rfue7t a.svelte-1rfue7t:focus{color:unset}",
  map: '{"version":3,"file":"LinkableHeader.svelte","sources":["LinkableHeader.svelte"],"sourcesContent":["<script lang=\\"ts\\">import DynamicLeveledHeader from \'./DynamicLeveledHeader.svelte\';\\r\\nexport let title = \'Section Title\';\\r\\nexport let headerLevel = 2;\\r\\nexport let titleId = \'\';\\r\\n$: {\\r\\n    titleId = `h${headerLevel}-${title.toLowerCase().replace(/ /g, \'-\')}`;\\r\\n}\\r\\n</script>\\n\\n<header>\\n\\t<div class=\\"header-label\\">\\n\\t\\t<DynamicLeveledHeader level={headerLevel} id={titleId}>{title}</DynamicLeveledHeader>\\n\\t\\t<a href={`#${titleId}`} aria-label={`Go to the \\"${title}\\" section`}>#</a>\\n\\t</div>\\n\\t<slot></slot>\\n</header>\\n\\n<style lang=\\"scss\\">.header-label {\\n  display: flex;\\n}\\n.header-label a {\\n  align-self: center;\\n  margin-left: 1em;\\n  color: transparent;\\n}\\n.header-label:hover a, .header-label a:focus {\\n  color: unset;\\n}</style>\\n"],"names":[],"mappings":"AAiBmB,aAAa,8BAAC,CAAC,AAChC,OAAO,CAAE,IAAI,AACf,CAAC,AACD,4BAAa,CAAC,CAAC,eAAC,CAAC,AACf,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,WAAW,AACpB,CAAC,AACD,4BAAa,MAAM,CAAC,gBAAC,CAAE,4BAAa,CAAC,gBAAC,MAAM,AAAC,CAAC,AAC5C,KAAK,CAAE,KAAK,AACd,CAAC"}'
};
const LinkableHeader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title = "Section Title"} = $$props;
  let {headerLevel = 2} = $$props;
  let {titleId = ""} = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.headerLevel === void 0 && $$bindings.headerLevel && headerLevel !== void 0)
    $$bindings.headerLevel(headerLevel);
  if ($$props.titleId === void 0 && $$bindings.titleId && titleId !== void 0)
    $$bindings.titleId(titleId);
  $$result.css.add(css$3);
  {
    {
      titleId = `h${headerLevel}-${title.toLowerCase().replace(/ /g, "-")}`;
    }
  }
  return `<header><div class="${"header-label svelte-1rfue7t"}">${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel, id: titleId}, {}, {default: () => `${escape(title)}`})}
		<a${add_attribute("href", `#${titleId}`, 0)}${add_attribute("aria-label", `Go to the "${title}" section`, 0)} class="${"svelte-1rfue7t"}">#</a></div>
	${slots.default ? slots.default({}) : ``}
</header>`;
});
const LinkableSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title = "Section Title"} = $$props;
  let {headerLevel = 2} = $$props;
  let titleId = "";
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.headerLevel === void 0 && $$bindings.headerLevel && headerLevel !== void 0)
    $$bindings.headerLevel(headerLevel);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `<article>${validate_component(LinkableHeader, "LinkableHeader").$$render($$result, {headerLevel, title, titleId}, {
      titleId: ($$value) => {
        titleId = $$value;
        $$settled = false;
      }
    }, {})}
	${slots.default ? slots.default({headerId: titleId}) : `Section content`}</article>`;
  } while (!$$settled);
  return $$rendered;
});
const LanguageList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {languages = []} = $$props;
  let processedLanguages = [];
  if ($$props.languages === void 0 && $$bindings.languages && languages !== void 0)
    $$bindings.languages(languages);
  {
    {
      const maxSize = languages.reduce((acc, val) => acc + val.size, 0);
      processedLanguages = languages.map(({size, name, color}) => {
        const percentSize = +(size / maxSize * 100).toFixed(2);
        return {name, color, percentSize};
      });
    }
  }
  return `${processedLanguages.length > 0 ? `<ul>${each(processedLanguages, (language) => `<li>${escape(language.name)} (${escape(language.percentSize)}%)
		</li>`)}</ul>` : `<span>No language data specified.</span>`}`;
});
const OverallProjectStatisticsSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const overallProjectStatisticsPromise = getProjectDataAsync().then((data) => {
    const overallMessage = `${data.overall.languages.length} languages across ${data.overall.count.total} public repositories (${data.overall.count.mine} owned).`;
    return {
      overallMessage,
      languages: data.overall.languages
    };
  });
  return `${validate_component(LinkableSection, "LinkableSection").$$render($$result, {title: "Overall Project Statistics"}, {}, {
    default: () => `${function(__value) {
      if (is_promise(__value))
        return `
		Loading project statistics...
	`;
      return function(overallStatistics) {
        return `
		<p>${escape(overallStatistics.overallMessage)}</p>
		<section>${validate_component(LanguageList, "LanguageList").$$render($$result, {languages: overallStatistics.languages}, {}, {})}</section>
	`;
      }(__value);
    }(overallProjectStatisticsPromise)}
	<nav><a href="${"projects"}">See more projects</a></nav>`
  })}`;
});
function getRandomHtmlId() {
  return `html-id-${Date.now()}-${Math.random().toString().slice(3)}`;
}
var DateTime_svelte_svelte_type_style_lang = "time.svelte-1j3ngip{text-decoration:underline dotted}.date-popup-text.svelte-1j3ngip{display:none;position:fixed;border:1px solid #fc0;padding:3px 6px;background:#fffea1}.date-popup-text.visible.svelte-1j3ngip{display:block}";
const css$2 = {
  code: "time.svelte-1j3ngip{text-decoration:underline dotted}.date-popup-text.svelte-1j3ngip{display:none;position:fixed;border:1px solid #fc0;padding:3px 6px;background:#fffea1}.date-popup-text.visible.svelte-1j3ngip{display:block}",
  map: '{"version":3,"file":"DateTime.svelte","sources":["DateTime.svelte"],"sourcesContent":["<script context=\\"module\\" lang=\\"ts\\">import dayjs from \'dayjs\';\\r\\nimport relativeTime from \'dayjs/plugin/relativeTime.js\';\\r\\ndayjs.extend(relativeTime);\\r\\n</script>\\n\\n<script lang=\\"ts\\">import { tick } from \'svelte\';\\r\\nexport let dateTime = (new Date()).toDateString();\\r\\nlet differenceFromNow;\\r\\nlet parsedDateString;\\r\\nlet isoDateString;\\r\\nlet timeElement;\\r\\nlet datePopupElement;\\r\\nlet datePopupIsVisible = false;\\r\\nlet datePopupElementWidth = 0;\\r\\nlet datePopupElementHeight = 0;\\r\\nlet timeElementDimensions = { top: 0, left: 0, width: 0, height: 0 };\\r\\nlet datePopupElementStyle = \'\';\\r\\n$: {\\r\\n    const parsedDate = new Date(dateTime);\\r\\n    differenceFromNow = dayjs(parsedDate).fromNow();\\r\\n    parsedDateString = parsedDate.toDateString();\\r\\n    isoDateString = parsedDate.toISOString();\\r\\n}\\r\\n$: {\\r\\n    const leftOffset = (timeElementDimensions.width - datePopupElementWidth) / 2;\\r\\n    const leftStyle = `${timeElementDimensions.left + leftOffset}px`;\\r\\n    const topStyle = `${timeElementDimensions.top - datePopupElementHeight - (timeElementDimensions.height * 0.25)}px`;\\r\\n    datePopupElementStyle = `left: ${leftStyle}; top: ${topStyle}`;\\r\\n}\\r\\nfunction showDatePopup() {\\r\\n    const { top, left, width, height } = timeElement.getBoundingClientRect();\\r\\n    timeElementDimensions = { top, left, width, height };\\r\\n    datePopupIsVisible = true;\\r\\n    tick().then(() => {\\r\\n        /**\\r\\n         * Binding on the element directly doesn\'t seem work because\\r\\n         * client width and client height are 0 when the element\\r\\n         * is hidden and doesn\'t seem to update when the element appears.\\r\\n         */\\r\\n        datePopupElementWidth = datePopupElement.clientWidth;\\r\\n        datePopupElementHeight = datePopupElement.clientHeight;\\r\\n    });\\r\\n}\\r\\nfunction hideDatePopup() {\\r\\n    datePopupIsVisible = false;\\r\\n}\\r\\n</script>\\n\\n<!-- Apply aria-hidden to span since data displayed is already in the span.sr-only within the time element -->\\n<span\\n\\tbind:this={datePopupElement}\\n\\taria-hidden=\\"true\\"\\n\\tclass=\\"date-popup-text\\"\\n\\tstyle={datePopupElementStyle}\\n\\tclass:visible={datePopupIsVisible}>{parsedDateString}</span>\\n<time\\n\\tbind:this={timeElement}\\n\\tdatetime={isoDateString}\\n\\ttabindex=\\"0\\"\\n\\ton:focus={showDatePopup}\\n\\ton:blur={hideDatePopup}\\n\\ton:mouseenter={showDatePopup}\\n\\ton:mouseleave={hideDatePopup}>{differenceFromNow}<span class=\\"sr-only\\"> ({parsedDateString})</span></time>\\n\\n<style lang=\\"scss\\">time {\\n  text-decoration: underline dotted;\\n}\\n\\n.date-popup-text {\\n  display: none;\\n  position: fixed;\\n  border: 1px solid #fc0;\\n  padding: 3px 6px;\\n  background: #fffea1;\\n}\\n.date-popup-text.visible {\\n  display: block;\\n}</style>\\n\\n"],"names":[],"mappings":"AAgEmB,IAAI,eAAC,CAAC,AACvB,eAAe,CAAE,SAAS,CAAC,MAAM,AACnC,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,GAAG,CAAC,GAAG,CAChB,UAAU,CAAE,OAAO,AACrB,CAAC,AACD,gBAAgB,QAAQ,eAAC,CAAC,AACxB,OAAO,CAAE,KAAK,AAChB,CAAC"}'
};
dayjs.extend(relativeTime);
const DateTime = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {dateTime = new Date().toDateString()} = $$props;
  let differenceFromNow;
  let parsedDateString;
  let isoDateString;
  let timeElement;
  let datePopupElement;
  let datePopupElementWidth = 0;
  let datePopupElementHeight = 0;
  let timeElementDimensions = {top: 0, left: 0, width: 0, height: 0};
  let datePopupElementStyle = "";
  if ($$props.dateTime === void 0 && $$bindings.dateTime && dateTime !== void 0)
    $$bindings.dateTime(dateTime);
  $$result.css.add(css$2);
  {
    {
      const parsedDate = new Date(dateTime);
      differenceFromNow = dayjs(parsedDate).fromNow();
      parsedDateString = parsedDate.toDateString();
      isoDateString = parsedDate.toISOString();
    }
  }
  {
    {
      const leftOffset = (timeElementDimensions.width - datePopupElementWidth) / 2;
      const leftStyle = `${timeElementDimensions.left + leftOffset}px`;
      const topStyle = `${timeElementDimensions.top - datePopupElementHeight - timeElementDimensions.height * 0.25}px`;
      datePopupElementStyle = `left: ${leftStyle}; top: ${topStyle}`;
    }
  }
  return `
<span aria-hidden="${"true"}" class="${["date-popup-text svelte-1j3ngip", ""].join(" ").trim()}"${add_attribute("style", datePopupElementStyle, 0)}${add_attribute("this", datePopupElement, 1)}>${escape(parsedDateString)}</span>
<time${add_attribute("datetime", isoDateString, 0)} tabindex="${"0"}" class="${"svelte-1j3ngip"}"${add_attribute("this", timeElement, 1)}>${escape(differenceFromNow)}<span class="${"sr-only"}">(${escape(parsedDateString)})</span></time>`;
});
const ProjectEntrySection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {project = null} = $$props;
  let {headerLevel = 2} = $$props;
  let deploymentInfo, packageInfo, createdAtDate, lastPushedAtDate, ownerLink;
  let externalLinksId = "";
  if ($$props.project === void 0 && $$bindings.project && project !== void 0)
    $$bindings.project(project);
  if ($$props.headerLevel === void 0 && $$bindings.headerLevel && headerLevel !== void 0)
    $$bindings.headerLevel(headerLevel);
  {
    {
      if (project) {
        const {deployments, packages, createdAt, lastPushedAt} = project;
        deploymentInfo = {
          totalCount: deployments.totalCount,
          lastDeployment: deployments.nodes[0] ? new Date(deployments.nodes[0].updatedAt) : null
        };
        packageInfo = {totalCount: packages.totalCount};
        if (packages.nodes[0]) {
          const entry = packages.nodes[0];
          packageInfo.latestPackage = `${entry.name}@${entry.latestVersion.version}`;
        }
        createdAtDate = new Date(createdAt);
        lastPushedAtDate = new Date(lastPushedAt);
        ownerLink = `https://github.com/${project.owner}/`;
        externalLinksId = getRandomHtmlId();
      } else {
        deploymentInfo = packageInfo = {totalCount: 0};
      }
    }
  }
  return `<article>${project ? `<header>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel}, {}, {default: () => `${escape(project.name)}`})}
			<p>Created ${validate_component(DateTime, "DateTime").$$render($$result, {dateTime: createdAtDate.toISOString()}, {}, {})} by <a${add_attribute("href", ownerLink, 0)}>${escape(project.owner)}</a>,
				last committed to ${validate_component(DateTime, "DateTime").$$render($$result, {dateTime: lastPushedAtDate.toISOString()}, {}, {})}</p></header>
		<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Description`})}
			<p>${escape(project.description || "(No description provided)")}</p></section>
		${deploymentInfo.totalCount > 0 || packageInfo.totalCount > 0 ? `<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Release Statistics`})}
				<ul>${deploymentInfo.totalCount > 0 ? `<li>${escape(deploymentInfo.totalCount)} ${escape(deploymentInfo.totalCount !== 1 ? "deployments" : "deployment")}. Most recent deployment is <time${add_attribute("datetime", deploymentInfo.lastDeployment.toISOString(), 0)}>${escape(deploymentInfo.lastDeployment.toLocaleDateString())}.</time></li>` : ``}

					${packageInfo.totalCount > 0 ? `<li>${escape(packageInfo.totalCount)} ${escape(packageInfo.totalCount !== 1 ? "packages" : "package")}. Newest release is ${escape(packageInfo.latestPackage)}.
						</li>` : ``}</ul></section>` : ``}
		${project.topics.length > 0 ? `<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Topics`})}
				<ul>${each(project.topics, (topic) => `<li><a${add_attribute("href", topic.url, 0)}><span class="${"sr-only"}">View other GitHub projects under the </span>${escape(topic.name)}<span class="${"sr-only"}">topic</span></a></li>`)}</ul></section>` : ``}
		${project.languages.length > 0 ? `<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Languages`})}
				${validate_component(LanguageList, "LanguageList").$$render($$result, {languages: project.languages}, {}, {})}</section>` : ``}
		<section><nav${add_attribute("aria-labelledby", externalLinksId, 0)}>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {
    level: headerLevel + 1,
    id: externalLinksId
  }, {}, {
    default: () => `Related External Links <span class="${"sr-only"}">for the &quot;${escape(project.name)}&quot; project by ${escape(project.owner)}</span>`
  })}
				<ul><li><a${add_attribute("href", project.repoURL, 0)}>Go to Code Repository <span class="${"sr-only"}">for the &quot;${escape(project.name)}&quot; project by ${escape(project.owner)}</span></a></li>
					${project.homepageURL ? `<li><a${add_attribute("href", project.homepageURL, 0)}>Visit Project Page <span class="${"sr-only"}">for the &quot;${escape(project.name)}&quot; project by ${escape(project.owner)}</span></a></li>` : ``}</ul></nav></section>` : `${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel}, {}, {default: () => `Empty Project Entry`})}
		<p>No project data found.</p>`}</article>`;
});
const ProjectList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {projects: projects2 = []} = $$props;
  let {projectHeaderLevel = 2} = $$props;
  if ($$props.projects === void 0 && $$bindings.projects && projects2 !== void 0)
    $$bindings.projects(projects2);
  if ($$props.projectHeaderLevel === void 0 && $$bindings.projectHeaderLevel && projectHeaderLevel !== void 0)
    $$bindings.projectHeaderLevel(projectHeaderLevel);
  return `${projects2.length > 0 ? `<ul>${each(projects2, (project) => `<li>${validate_component(ProjectEntrySection, "ProjectEntrySection").$$render($$result, {project, headerLevel: projectHeaderLevel}, {}, {})}
		</li>`)}</ul>` : `<span>No project data specified.</span>`}`;
});
function _getPostDataAsync() {
  const fetchMethod2 = getCurrentFetchMethod() || self.fetch;
  return fetchMethod2("/post-metadata.json").then((r) => r.ok ? r.json() : Promise.reject(r.statusText));
}
const postDataGetter = createSingletonGetter(_getPostDataAsync);
function getPostDataAsync() {
  return postDataGetter();
}
const PostEntrySection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {post = null} = $$props;
  let {headerLevel = 2} = $$props;
  let keywords, datePublished, dateModified;
  if ($$props.post === void 0 && $$bindings.post && post !== void 0)
    $$bindings.post(post);
  if ($$props.headerLevel === void 0 && $$bindings.headerLevel && headerLevel !== void 0)
    $$bindings.headerLevel(headerLevel);
  {
    {
      if (post) {
        if (Array.isArray(post.keywords) && post.keywords.length > 0) {
          keywords = post.keywords.slice();
        }
        datePublished = new Date(post.datePublished);
        if (post.dateModified) {
          dateModified = new Date(post.dateModified);
        }
      }
    }
  }
  return `<article>${post ? `<header><a${add_attribute("href", post.url, 0)}>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel}, {}, {default: () => `${escape(post.title)}`})}</a>
			<p>Posted ${validate_component(DateTime, "DateTime").$$render($$result, {dateTime: datePublished.toISOString()}, {}, {})}.
				${dateModified ? `Updated ${validate_component(DateTime, "DateTime").$$render($$result, {dateTime: dateModified.toISOString()}, {}, {})}` : ``}</p></header>
		<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Summary`})}
			<p>${escape(post.description || "(No description provided)")}</p></section>
		${keywords ? `<section>${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel + 1}, {}, {default: () => `Keywords`})}
				<ul>${each(keywords, (keyword) => `
						<li>${escape(keyword)}</li>`)}</ul></section>` : ``}` : `${validate_component(DynamicLeveledHeader, "DynamicLeveledHeader").$$render($$result, {level: headerLevel}, {}, {default: () => `Empty Post Entry`})}
		<p>No post data found.</p>`}</article>`;
});
const PostList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {posts = []} = $$props;
  let {postHeaderLevel = 2} = $$props;
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
    $$bindings.posts(posts);
  if ($$props.postHeaderLevel === void 0 && $$bindings.postHeaderLevel && postHeaderLevel !== void 0)
    $$bindings.postHeaderLevel(postHeaderLevel);
  return `${posts.length > 0 ? `<ul>${each(posts, (post) => `<li>${validate_component(PostEntrySection, "PostEntrySection").$$render($$result, {post, headerLevel: postHeaderLevel}, {}, {})}
		</li>`)}</ul>` : `<span>No project data specified.</span>`}`;
});
function load$2(args) {
  return defaultLoadMethodForMethodStore(args);
}
const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const projectDataPromise = getProjectDataAsync().then((data) => {
    return Object.values(data.projects).sort((a, b) => new Date(b.lastPushedAt).valueOf() - new Date(a.lastPushedAt).valueOf()).slice(0, 5);
  });
  const postDataPromise = getPostDataAsync().then((posts) => {
    return posts.slice().sort((a, b) => new Date(b.dateModified || b.datePublished).valueOf() - new Date(a.dateModified || a.datePublished).valueOf()).slice(0, 5);
  });
  return `${$$result.head += `${$$result.title = `<title>Home Page | joshuacastor.me</title>`, ""}`, ""}

<main><h1 class="${"sr-only"}">Home Page</h1>

	${validate_component(LinkableSection, "LinkableSection").$$render($$result, {title: "About Me"}, {}, {
    default: () => `<p>I am Joshua Castor and I enjoy programming stuff. My current focus is front-end web development with JavaScript. Looking to learn more about writing performant, accessible, secure sites with good User Experience (UX).</p>`
  })}

	

	${validate_component(LinkableSection, "LinkableSection").$$render($$result, {title: "Recent Posts"}, {}, {
    default: () => `${function(__value) {
      if (is_promise(__value))
        return `
			Loading post data...
		`;
      return function(posts) {
        return `
			${validate_component(PostList, "PostList").$$render($$result, {posts}, {}, {})}
			<nav aria-labelledby="${"other-post-links-label"}"><h3 class="${"sr-only"}" id="${"other-posts-links-label"}">Other Post Links</h3>
				<a href="${"/posts"}">View more posts.</a></nav>
		`;
      }(__value);
    }(postDataPromise)}`
  })}

	${validate_component(LinkableSection, "LinkableSection").$$render($$result, {title: "Recent Projects"}, {}, {
    default: () => `${function(__value) {
      if (is_promise(__value))
        return `
			Loading project data...
		`;
      return function(projects2) {
        return `
			${validate_component(ProjectList, "ProjectList").$$render($$result, {projects: projects2}, {}, {})}
			<nav aria-labelledby="${"other-project-links-label"}"><h3 class="${"sr-only"}" id="${"other-project-links-label"}">Other Project Links</h3>
				<a href="${"/projects"}">View more projects</a></nav>
		`;
      }(__value);
    }(projectDataPromise)}`
  })}

	${validate_component(OverallProjectStatisticsSection, "OverallProjectStatisticsSection").$$render($$result, {}, {}, {})}</main>`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Routes,
  load: load$2
});
var TernaryOption;
(function(TernaryOption2) {
  TernaryOption2[TernaryOption2["TrueOrFalse"] = 0] = "TrueOrFalse";
  TernaryOption2[TernaryOption2["True"] = 1] = "True";
  TernaryOption2[TernaryOption2["False"] = 2] = "False";
})(TernaryOption || (TernaryOption = {}));
var SortType;
(function(SortType2) {
  SortType2["LastCommitDate"] = "lastCommitDate";
  SortType2["Alphabetical"] = "alphabetical";
  SortType2["CreationDate"] = "creationDate";
})(SortType || (SortType = {}));
function getProjectPageExistenceFilterOptions() {
  return [
    {label: "With or Without Project Page", value: 0},
    {label: "Only With Project Page", value: 1},
    {label: "Only Without Project Page", value: 2}
  ];
}
function getPackageExistenceFilterOptions() {
  return [
    {label: "With or Without Packages", value: 0},
    {label: "Only With Packages", value: 1},
    {label: "Only Without Packages", value: 2}
  ];
}
function getDeploymentExistenceFilterOptions() {
  return [
    {label: "With or Without Deployments", value: 0},
    {label: "Only With Deployments", value: 1},
    {label: "Only Without Deployments", value: 2}
  ];
}
function getSortTypeOptions() {
  return [
    {
      label: "Last Commit Date",
      value: SortType.LastCommitDate,
      filterFunction: (a, b, direction) => new Date(a.lastPushedAt).valueOf() - new Date(b.lastPushedAt).valueOf() * direction
    },
    {
      label: "Alphabetical",
      value: SortType.Alphabetical,
      filterFunction: (a, b, direction) => a.name.toLocaleLowerCase().localeCompare(b.name.toLocaleLowerCase()) * direction
    },
    {
      label: "Creation Date",
      value: SortType.CreationDate,
      filterFunction: (a, b, direction) => new Date(a.createdAt).valueOf() - new Date(b.createdAt).valueOf() * direction
    }
  ];
}
function getSortDirectionOptions() {
  return [
    {label: "Ascending", value: 1},
    {label: "Descending", value: -1}
  ];
}
const filterPipeline = [
  function filterName(project, {name}) {
    let result = !name;
    if (!result) {
      result = project.name.toLowerCase().includes(name);
    }
    return result;
  },
  function filterLanguage(project, {languages}) {
    let result = languages.length === 0;
    if (!result) {
      result = languages.some((language) => project.languages.some((projectLanguage) => projectLanguage.name === language));
    }
    return result;
  },
  function filterAuthor(project, {authors}) {
    let result = authors.length === 0;
    if (!result) {
      result = authors.some((author) => project.owner === author);
    }
    return result;
  },
  function filterProjectPageExistence(project, {projectPageExistenceFilter}) {
    let result = projectPageExistenceFilter === 0;
    if (!result) {
      const hasHomepageUrl = !!project.homepageURL;
      result = projectPageExistenceFilter === 1 && hasHomepageUrl || projectPageExistenceFilter === 2 && !hasHomepageUrl;
    }
    return result;
  },
  function filterPackageExistence(project, {packageExistenceFilter}) {
    let result = packageExistenceFilter === 0;
    if (!result) {
      const hasPackages = project.packages.totalCount > 0;
      result = packageExistenceFilter === 1 && hasPackages || packageExistenceFilter === 2 && !hasPackages;
    }
    return result;
  },
  function filterDeploymentExistence(project, {deploymentExistenceFilter}) {
    let result = deploymentExistenceFilter === 0;
    if (!result) {
      const hasDeployments = project.deployments.totalCount > 0;
      result = deploymentExistenceFilter === 1 && hasDeployments || deploymentExistenceFilter === 2 && !hasDeployments;
    }
    return result;
  }
];
function getSortFunction(sortType, sortDirection) {
  const sortTypes = getSortTypeOptions();
  const matchingSortType = sortTypes.find((t) => t.value === sortType) || sortTypes.find((t) => t.value === SortType.Alphabetical);
  return (a, b) => matchingSortType.filterFunction(a, b, sortDirection);
}
function getFilteredProjectList(projects2, filters) {
  const sortFunction = getSortFunction(filters.sortType, filters.sortDirection);
  return projects2.filter((project) => filterPipeline.every((filterMatcher) => filterMatcher(project, filters))).sort(sortFunction);
}
function getDefaultFilterOptions() {
  return {
    name: "",
    languages: [],
    authors: [],
    projectPageExistenceFilter: 0,
    packageExistenceFilter: 0,
    deploymentExistenceFilter: 0,
    sortType: SortType.LastCommitDate,
    sortDirection: -1
  };
}
function arraysAreIdentical(a, b, compareFunction = (valueA, valueB) => valueA === valueB) {
  let result = a.length === b.length;
  if (result) {
    result = a.every((valueA) => b.some((valueB) => compareFunction(valueA, valueB)));
  }
  return result;
}
function filterOptionsToUrlSearchParams(filters) {
  const params = new URLSearchParams();
  const defaultFilters = getDefaultFilterOptions();
  Object.keys(defaultFilters).forEach((filterKey) => {
    const defaultValue = defaultFilters[filterKey];
    const filterValue = filters[filterKey];
    let differsFromDefault = false;
    if (Array.isArray(defaultValue)) {
      differsFromDefault = Array.isArray(filterValue) && !arraysAreIdentical(defaultValue, filterValue);
    } else if (typeof filterValue !== "object") {
      differsFromDefault = defaultValue !== filterValue;
    }
    if (differsFromDefault) {
      params.set(filterKey, filterValue);
    }
  });
  return params;
}
function urlSearchParamstoFilterOptions(params) {
  const filterResult = getDefaultFilterOptions();
  params.forEach((value, key) => {
    const defaultValue = filterResult[key];
    if (Array.isArray(defaultValue)) {
      filterResult[key] = value.split(",");
    } else if (typeof defaultValue === "number") {
      filterResult[key] = +value;
    } else {
      filterResult[key] = value;
    }
  });
  return filterResult;
}
const CheckboxGroup = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {options: options2 = []} = $$props;
  let {groupTitle = ""} = $$props;
  let {value = []} = $$props;
  if ($$props.options === void 0 && $$bindings.options && options2 !== void 0)
    $$bindings.options(options2);
  if ($$props.groupTitle === void 0 && $$bindings.groupTitle && groupTitle !== void 0)
    $$bindings.groupTitle(groupTitle);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  return `<fieldset><legend>${escape(groupTitle)}</legend>
	${each(options2, (option) => `<label><input type="${"checkbox"}"${add_attribute("value", option.value, 0)}>
			${escape(option.label)}
		</label>`)}</fieldset>`;
});
const RadioGroup = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {options: options2 = []} = $$props;
  let {groupTitle = ""} = $$props;
  let {value = null} = $$props;
  if ($$props.options === void 0 && $$bindings.options && options2 !== void 0)
    $$bindings.options(options2);
  if ($$props.groupTitle === void 0 && $$bindings.groupTitle && groupTitle !== void 0)
    $$bindings.groupTitle(groupTitle);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  return `<fieldset><legend>${escape(groupTitle)}</legend>
	${each(options2, (option) => `<label><input type="${"radio"}"${add_attribute("value", option.value, 0)}>
			${escape(option.label)}
		</label>`)}</fieldset>`;
});
const getStores = () => {
  const stores = getContext("__svelte__");
  return {
    page: {
      subscribe: stores.page.subscribe
    },
    navigating: {
      subscribe: stores.navigating.subscribe
    },
    get preloading() {
      console.error("stores.preloading is deprecated; use stores.navigating instead");
      return {
        subscribe: stores.navigating.subscribe
      };
    },
    session: stores.session
  };
};
const page = {
  subscribe(fn) {
    const store = getStores().page;
    return store.subscribe(fn);
  }
};
const logger = getLogger("SearchSection");
function convertStringArrayToLabelValuePairArray(arr) {
  return arr.map((value) => ({label: value, value}));
}
const SearchSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {disabled = false} = $$props;
  let {languages = []} = $$props;
  let {authors = []} = $$props;
  let {allProjects = []} = $$props;
  const dispatch = createEventDispatcher();
  const projectPageOptions = getProjectPageExistenceFilterOptions();
  const packageOptions = getPackageExistenceFilterOptions();
  const deploymentOptions = getDeploymentExistenceFilterOptions();
  const sortTypeOptions = getSortTypeOptions();
  const sortDirectionOptions = getSortDirectionOptions();
  let nameFilter = "";
  let languageOptions = [];
  let authorOptions = [];
  let selectedLanguages = [];
  let selectedAuthors = [];
  let projectPageExistenceFilter = 0;
  let packageExistenceFilter = 0;
  let deploymentExistenceFilter = 0;
  let sortType = SortType.LastCommitDate;
  let sortDirection = -1;
  function getFiltersFromInput() {
    return {
      name: nameFilter,
      languages: selectedLanguages,
      authors: selectedAuthors,
      projectPageExistenceFilter,
      packageExistenceFilter,
      deploymentExistenceFilter,
      sortType,
      sortDirection
    };
  }
  function applyFilterstoInput(filters) {
    nameFilter = filters.name;
    selectedLanguages = filters.languages.filter((lang) => languageOptions.find((opt) => opt.value === lang));
    selectedAuthors = filters.authors.filter((author) => authorOptions.find((opt) => opt.value === author));
    projectPageExistenceFilter = filters.projectPageExistenceFilter;
    packageExistenceFilter = filters.packageExistenceFilter;
    deploymentExistenceFilter = filters.deploymentExistenceFilter;
    sortType = filters.sortType;
    sortDirection = filters.sortDirection;
  }
  function onFormSubmission() {
    const filters = getFiltersFromInput();
    logger.debug(filters);
    const filteredProjects = getFilteredProjectList(allProjects, getFiltersFromInput());
    logger.debug({filteredProjects});
    dispatch("filterchange", {filteredProjects, filters});
  }
  let pageQueryParams = null;
  let hasMounted = false;
  page.subscribe(({query}) => {
    pageQueryParams = query;
    if (hasMounted) {
      applyFiltersFromUrlParams();
    }
  });
  function applyFiltersFromUrlParams() {
    if (pageQueryParams) {
      const originalUrl = pageQueryParams.toString();
      const urlFromCurrentFilters = filterOptionsToUrlSearchParams(getFiltersFromInput()).toString();
      if (originalUrl !== urlFromCurrentFilters) {
        const filters = urlSearchParamstoFilterOptions(pageQueryParams);
        logger.debug("applying filters from params", {
          params: originalUrl,
          filters,
          urlFromCurrentFilters
        });
        applyFilterstoInput(filters);
        onFormSubmission();
      }
    }
  }
  onMount(() => {
    applyFiltersFromUrlParams();
    hasMounted = true;
  });
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  if ($$props.languages === void 0 && $$bindings.languages && languages !== void 0)
    $$bindings.languages(languages);
  if ($$props.authors === void 0 && $$bindings.authors && authors !== void 0)
    $$bindings.authors(authors);
  if ($$props.allProjects === void 0 && $$bindings.allProjects && allProjects !== void 0)
    $$bindings.allProjects(allProjects);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    {
      {
        languageOptions = convertStringArrayToLabelValuePairArray(languages);
        authorOptions = convertStringArrayToLabelValuePairArray(authors);
      }
    }
    $$rendered = `<section><form><h2>Search Projects</h2>
		<div><label for="${"name"}">Name:</label>
			<input type="${"text"}" name="${"name"}" id="${"name"}" ${disabled ? "disabled" : ""}${add_attribute("value", nameFilter, 1)}></div>
		<section><h3>Additional Filters</h3>
			${validate_component(CheckboxGroup, "CheckboxGroup").$$render($$result, {
      groupTitle: "Languages",
      options: languageOptions,
      value: selectedLanguages
    }, {
      value: ($$value) => {
        selectedLanguages = $$value;
        $$settled = false;
      }
    }, {})}
			${validate_component(CheckboxGroup, "CheckboxGroup").$$render($$result, {
      groupTitle: "Authors",
      options: authorOptions,
      value: selectedAuthors
    }, {
      value: ($$value) => {
        selectedAuthors = $$value;
        $$settled = false;
      }
    }, {})}
			${validate_component(RadioGroup, "RadioGroup").$$render($$result, {
      groupTitle: "Project Page",
      options: projectPageOptions,
      value: projectPageExistenceFilter
    }, {
      value: ($$value) => {
        projectPageExistenceFilter = $$value;
        $$settled = false;
      }
    }, {})}
			${validate_component(RadioGroup, "RadioGroup").$$render($$result, {
      groupTitle: "Packages",
      options: packageOptions,
      value: packageExistenceFilter
    }, {
      value: ($$value) => {
        packageExistenceFilter = $$value;
        $$settled = false;
      }
    }, {})}
			${validate_component(RadioGroup, "RadioGroup").$$render($$result, {
      groupTitle: "Deployments",
      options: deploymentOptions,
      value: deploymentExistenceFilter
    }, {
      value: ($$value) => {
        deploymentExistenceFilter = $$value;
        $$settled = false;
      }
    }, {})}</section>
		<section><h3>Sorts</h3>
			${validate_component(RadioGroup, "RadioGroup").$$render($$result, {
      groupTitle: "Type",
      options: sortTypeOptions,
      value: sortType
    }, {
      value: ($$value) => {
        sortType = $$value;
        $$settled = false;
      }
    }, {})}
			${validate_component(RadioGroup, "RadioGroup").$$render($$result, {
      groupTitle: "Direction",
      options: sortDirectionOptions,
      value: sortDirection
    }, {
      value: ($$value) => {
        sortDirection = $$value;
        $$settled = false;
      }
    }, {})}</section>

		<button type="${"submit"}" ${disabled ? "disabled" : ""}>Search</button></form></section>`;
  } while (!$$settled);
  return $$rendered;
});
function load$1(args) {
  return defaultLoadMethodForMethodStore(args);
}
const Projects = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let visibleProjects = [];
  let isLoading = true;
  const logger2 = getLogger("ProjectsPage");
  const projectDataPromise = getProjectDataAsync().then((data) => {
    visibleProjects = Object.values(data.projects);
    isLoading = false;
    const searchingMetadata = {
      languages: data.overall.languages.map((entry) => entry.name),
      authors: data.overall.ownership.map((entry) => entry.name),
      allProjects: Object.values(data.projects)
    };
    return searchingMetadata;
  }).catch((err) => {
    logger2.error(err);
    isLoading = false;
    return {
      languages: [],
      authors: [],
      allProjects: []
    };
  });
  return `${$$result.head += `${$$result.title = `<title>Projects Page | joshuacastor.me</title>`, ""}`, ""}

<main><h1 class="${"sr-only"}">Projects Page</h1>

	${function(__value) {
    if (is_promise(__value))
      return `
		<section><p>Loading project data...</p></section>
	`;
    return function(searchingMetadata) {
      return `
		${validate_component(SearchSection, "SearchSection").$$render($$result, {
        disabled: isLoading,
        authors: searchingMetadata.authors,
        languages: searchingMetadata.languages,
        allProjects: searchingMetadata.allProjects
      }, {}, {})}
		<section><h2>Project List</h2>
			${validate_component(ProjectList, "ProjectList").$$render($$result, {
        projects: visibleProjects,
        projectHeaderLevel: 3
      }, {}, {})}</section>
	`;
    }(__value);
  }(projectDataPromise)}</main>`;
});
var projects = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Projects,
  load: load$1
});
const _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<main>${slots.default ? slots.default({}) : ``}</main>`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout
});
function load(args) {
  return defaultLoadMethodForMethodStore(args);
}
const Posts = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const postDataPromise = getPostDataAsync();
  return `${$$result.head += `${$$result.title = `<title>Blog Posts | joshuacastor.me</title>`, ""}`, ""}

<main><h1 class="${"sr-only"}">Blog Posts</h1>
	${function(__value) {
    if (is_promise(__value))
      return `
		<section><p>Loading post data...</p></section>
	`;
    return function(posts) {
      return `
		
		<section><h2>Post List</h2>
			${validate_component(PostList, "PostList").$$render($$result, {posts, postHeaderLevel: 3}, {}, {})}</section>
	`;
    }(__value);
  }(postDataPromise)}</main>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Posts,
  load
});
const siteName = "https://joshuacastor.me";
function getNormalizedSiteMetadata(metadata2) {
  let imageUrl = (metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.image) || null;
  if (imageUrl && !imageUrl.startsWith(siteName)) {
    imageUrl = `${siteName}/${imageUrl.startsWith("/") ? imageUrl.slice(1) : imageUrl}`;
  }
  return {
    title: `${(metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.title) || "Default Page Name"} | Blog Post on joshuacastor.me`,
    description: (metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.description) || "Default Page Description",
    author: (metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.author) || "Joshua Castor",
    keywords: Array.isArray(metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.keywords) && metadata2.keywords.length > 0 ? metadata2.keywords : null,
    image: imageUrl,
    datePublished: (metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.datePublished) || new Date(),
    dateModified: (metadata2 === null || metadata2 === void 0 ? void 0 : metadata2.dateModified) || null
  };
}
const MetadataProcessor = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {metadata: metadata2 = getNormalizedSiteMetadata()} = $$props;
  let normalizedMetadata = getNormalizedSiteMetadata();
  let ogUrl = "";
  let structuredDataString = "";
  const canonicalMetadataString = `<link rel="canonical" href="url">`;
  let hasMounted = false;
  onMount(() => {
    ogUrl = `https://joshuacastor.me${location.pathname}`;
    hasMounted = true;
  });
  beforeUpdate(() => {
    const existingMetadataJsonElements = Array.from(document.querySelectorAll('script[type="application/ld+json"]'));
    if (existingMetadataJsonElements.length > 1) {
      existingMetadataJsonElements.reverse().slice(1).forEach((elem) => {
        elem.remove();
      });
    }
  });
  if ($$props.metadata === void 0 && $$bindings.metadata && metadata2 !== void 0)
    $$bindings.metadata(metadata2);
  {
    {
      normalizedMetadata = getNormalizedSiteMetadata(metadata2);
      if (hasMounted) {
        ogUrl = `https://joshuacastor.me${location.pathname}`;
      }
      if (normalizedMetadata.image) {
        const jsonString = JSON.stringify({
          "@context": "https://schema.org/",
          "@type": "BlogPosting",
          headline: normalizedMetadata.title,
          name: normalizedMetadata.title,
          image: [normalizedMetadata.image],
          author: {
            "@type": "Person",
            name: normalizedMetadata.author
          },
          description: normalizedMetadata.description,
          datePublished: normalizedMetadata.datePublished.toISOString(),
          dateModified: (normalizedMetadata === null || normalizedMetadata === void 0 ? void 0 : normalizedMetadata.dateModified) ? normalizedMetadata.dateModified.toISOString() : void 0
        }, null, 2);
        const tagOpen = "<";
        const tagClose = ">";
        structuredDataString = [
          `${tagOpen}script type="application/ld+json"${tagClose}`,
          jsonString,
          `${tagOpen}/script${tagClose}`
        ].join("\n");
      } else {
        structuredDataString = "";
      }
    }
  }
  return `${$$result.head += `${$$result.title = `<title>${escape(normalizedMetadata.title)}</title>`, ""}<meta name="${"description"}"${add_attribute("content", normalizedMetadata.description, 0)} data-svelte="svelte-g9v785">${canonicalMetadataString}${normalizedMetadata.keywords ? `<meta name="${"keywords"}"${add_attribute("content", normalizedMetadata.keywords.join(", "), 0)} data-svelte="svelte-g9v785">` : ``}<meta name="${"twitter:card"}"${add_attribute("content", normalizedMetadata.description, 0)} data-svelte="svelte-g9v785"><meta property="${"og:url"}"${add_attribute("content", ogUrl, 0)} data-svelte="svelte-g9v785"><meta property="${"og:title"}"${add_attribute("content", normalizedMetadata.title, 0)} data-svelte="svelte-g9v785"><meta property="${"og:description"}"${add_attribute("content", normalizedMetadata.description, 0)} data-svelte="svelte-g9v785">${normalizedMetadata.image ? `<meta property="${"og:image"}"${add_attribute("content", normalizedMetadata.image, 0)} data-svelte="svelte-g9v785">
		${structuredDataString}` : ``}`, ""}`;
});
var myFirstSiteV1_svx_svelte_type_style_lang = "figure.svelte-ehvnbo.svelte-ehvnbo{margin-left:10vw;margin-right:10vw;text-align:center}figure.svelte-ehvnbo>img.svelte-ehvnbo{width:80vw}";
const css$1 = {
  code: "figure.svelte-ehvnbo.svelte-ehvnbo{margin-left:10vw;margin-right:10vw;text-align:center}figure.svelte-ehvnbo>img.svelte-ehvnbo{width:80vw}",
  map: `{"version":3,"file":"my-first-site-v1.svx","sources":["my-first-site-v1.svx"],"sourcesContent":["<script context=\\"module\\">\\n\\texport const metadata = {\\n\\t\\ttitle: \\"My First Site\\",\\n\\t\\tauthor: \\"Joshua Castor\\",\\n\\t\\tkeywords: [\\"site-iteration\\", \\"personal-site\\"],\\n\\t\\tdescription: \\"Learn about my very first iteration of my website, using Bootstrap and jQuery.\\",\\n\\t\\timage: \\"/img/old_site/v001.PNG\\",\\n\\t\\tdatePublished: new Date('2017-01-05T00:00:00-06:00'),\\n\\t\\tdateModified: new Date('2021-04-24T00:00:00-06:00'),\\n\\t};\\n</script>\\n<script>\\n\\timport DateTime from '$lib/components/DateTime.svelte';\\n\\timport LinkableHeader from '$lib/components/LinkableHeader.svelte';\\n\\timport MetadataProcessor from '$lib/components/posts/MetadataProcessor.svelte';\\n</script>\\n<style>\\nfigure {\\n\\tmargin-left: 10vw;\\n\\tmargin-right: 10vw;\\n\\ttext-align: center;\\n}\\n\\nfigure > img {\\n\\twidth: 80vw;\\n}\\n</style>\\n\\n\\n<MetadataProcessor {metadata} />\\n<LinkableHeader\\n\\ttitle={metadata.title}\\n\\theaderLevel={1}>\\n\\t<p>Page was originally available <DateTime dateTime={metadata.datePublished.toISOString()} />. This post was updated as part of the site overhaul <DateTime dateTime={metadata.dateModified.toISOString()} />.</p>\\n</LinkableHeader>\\n<figure>\\n\\t<img src=\\"/img/old_sites/v001.PNG\\" alt=\\"Screenshot of this website in January 2017\\">\\n</figure>\\n<p>My very first attempt at making a personal website. It was put together using Bootstrap 3.3.7 and jQuery 1.12.4 with traditional hardcoded files for the home page, the about page, and the contact page. <a\\n  href=\\"https://joshuacastor.me/old-sites/v1/\\"\\n  rel=\\"nofollow\\"\\n>Version 1 of the website (External Link)</a> can still be accessed today as a way for me to see how far I\u2019ve come.</p>\\n\\n"],"names":[],"mappings":"AAiBA,MAAM,4BAAC,CAAC,AACP,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,oBAAM,CAAG,GAAG,cAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACZ,CAAC"}`
};
const metadata$1 = {
  title: "My First Site",
  author: "Joshua Castor",
  keywords: ["site-iteration", "personal-site"],
  description: "Learn about my very first iteration of my website, using Bootstrap and jQuery.",
  image: "/img/old_site/v001.PNG",
  datePublished: new Date("2017-01-05T00:00:00-06:00"),
  dateModified: new Date("2021-04-24T00:00:00-06:00")
};
const My_first_site_v1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$1);
  return `${validate_component(MetadataProcessor, "MetadataProcessor").$$render($$result, {metadata: metadata$1}, {}, {})}
${validate_component(LinkableHeader, "LinkableHeader").$$render($$result, {title: metadata$1.title, headerLevel: 1}, {}, {
    default: () => `<p>Page was originally available ${validate_component(DateTime, "DateTime").$$render($$result, {
      dateTime: metadata$1.datePublished.toISOString()
    }, {}, {})}. This post was updated as part of the site overhaul ${validate_component(DateTime, "DateTime").$$render($$result, {
      dateTime: metadata$1.dateModified.toISOString()
    }, {}, {})}.</p>`
  })}
<figure class="${"svelte-ehvnbo"}"><img src="${"/img/old_sites/v001.PNG"}" alt="${"Screenshot of this website in January 2017"}" class="${"svelte-ehvnbo"}"></figure>
<p>My very first attempt at making a personal website. It was put together using Bootstrap 3.3.7 and jQuery 1.12.4 with traditional hardcoded files for the home page, the about page, and the contact page. <a href="${"https://joshuacastor.me/old-sites/v1/"}" rel="${"nofollow"}">Version 1 of the website (External Link)</a> can still be accessed today as a way for me to see how far I\u2019ve come.</p>`;
});
var myFirstSiteV1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": My_first_site_v1,
  metadata: metadata$1
});
var theSpaTreatmentAttempt1_svx_svelte_type_style_lang = "figure.svelte-ehvnbo.svelte-ehvnbo{margin-left:10vw;margin-right:10vw;text-align:center}figure.svelte-ehvnbo>img.svelte-ehvnbo{width:80vw}";
const css = {
  code: "figure.svelte-ehvnbo.svelte-ehvnbo{margin-left:10vw;margin-right:10vw;text-align:center}figure.svelte-ehvnbo>img.svelte-ehvnbo{width:80vw}",
  map: `{"version":3,"file":"the-spa-treatment-attempt-1.svx","sources":["the-spa-treatment-attempt-1.svx"],"sourcesContent":["<script context=\\"module\\">\\n\\texport const metadata = {\\n\\t\\ttitle: \\"The SPA Treatment (Attempt 1) - Bootstrap\\",\\n\\t\\tauthor: \\"Joshua Castor\\",\\n\\t\\tkeywords: [\\"site-iteration\\", \\"personal-site\\"],\\n\\t\\tdescription: \\"Learn about the second iteration of my website, using Vue (sort of) and Bootstrap.\\",\\n\\t\\timage: \\"/img/old_site/v002.PNG\\",\\n\\t\\tdatePublished: new Date('2017-12-12T00:00:00-06:00'),\\n\\t\\tdateModified: new Date('2021-04-25T00:00:00-06:00'),\\n\\t};\\n</script>\\n<script>\\n\\timport DateTime from '$lib/components/DateTime.svelte';\\n\\timport LinkableHeader from '$lib/components/LinkableHeader.svelte';\\n\\timport MetadataProcessor from '$lib/components/posts/MetadataProcessor.svelte';\\n</script>\\n<style>\\nfigure {\\n\\tmargin-left: 10vw;\\n\\tmargin-right: 10vw;\\n\\ttext-align: center;\\n}\\n\\nfigure > img {\\n\\twidth: 80vw;\\n}\\n</style>\\n\\n\\n<MetadataProcessor {metadata} />\\n<LinkableHeader\\n\\ttitle={metadata.title}\\n\\theaderLevel={1}>\\n\\t<p>Page was originally available <DateTime dateTime={metadata.datePublished.toISOString()} />. This post was updated as part of the site overhaul <DateTime dateTime={metadata.dateModified.toISOString()} />.</p>\\n</LinkableHeader>\\n<figure>\\n\\t<img src=\\"/img/old_sites/v002.PNG\\" alt=\\"Screenshot of this website in December 2017\\">\\n</figure>\\n<p>My second attempt at making a personal website and my first attempt at making a SPA style site. This iteration used Bootstrap 4.0.0-bat with <a\\n  href=\\"https://bootswatch.com/darkly/\\"\\n  rel=\\"nofollow\\"\\n>the Darkly Boostrap theme (External Link)</a>.</p>\\n<p>All the routing was done with pure JS (i.e. no framework or library used for routing). A lot of the core layout you may still see today was defined here (three main pages, GitHub style language bars, etc.).</p>\\n<p>This was also my first attempt at using Vue, but I didn\u2019t quite understand how frameworks like Vue worked and ended up with multiple Vue instances on a single page in an attempt to separate data. These instances included the main instance for the page, an instance for the coursework card, and an instance for the job entries card.</p>\\n<p>The <a\\n  href=\\"https://joshuacastor.me/old-sites/v2/\\"\\n  rel=\\"nofollow\\"\\n>website itself (External Link)</a>, which is Version 2 of the website, can still be accessed today as a way for me to see how far I\u2019ve come.</p>\\n\\n"],"names":[],"mappings":"AAiBA,MAAM,4BAAC,CAAC,AACP,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,oBAAM,CAAG,GAAG,cAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACZ,CAAC"}`
};
const metadata = {
  title: "The SPA Treatment (Attempt 1) - Bootstrap",
  author: "Joshua Castor",
  keywords: ["site-iteration", "personal-site"],
  description: "Learn about the second iteration of my website, using Vue (sort of) and Bootstrap.",
  image: "/img/old_site/v002.PNG",
  datePublished: new Date("2017-12-12T00:00:00-06:00"),
  dateModified: new Date("2021-04-25T00:00:00-06:00")
};
const The_spa_treatment_attempt_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(MetadataProcessor, "MetadataProcessor").$$render($$result, {metadata}, {}, {})}
${validate_component(LinkableHeader, "LinkableHeader").$$render($$result, {title: metadata.title, headerLevel: 1}, {}, {
    default: () => `<p>Page was originally available ${validate_component(DateTime, "DateTime").$$render($$result, {
      dateTime: metadata.datePublished.toISOString()
    }, {}, {})}. This post was updated as part of the site overhaul ${validate_component(DateTime, "DateTime").$$render($$result, {
      dateTime: metadata.dateModified.toISOString()
    }, {}, {})}.</p>`
  })}
<figure class="${"svelte-ehvnbo"}"><img src="${"/img/old_sites/v002.PNG"}" alt="${"Screenshot of this website in December 2017"}" class="${"svelte-ehvnbo"}"></figure>
<p>My second attempt at making a personal website and my first attempt at making a SPA style site. This iteration used Bootstrap 4.0.0-bat with <a href="${"https://bootswatch.com/darkly/"}" rel="${"nofollow"}">the Darkly Boostrap theme (External Link)</a>.</p>
<p>All the routing was done with pure JS (i.e. no framework or library used for routing). A lot of the core layout you may still see today was defined here (three main pages, GitHub style language bars, etc.).</p>
<p>This was also my first attempt at using Vue, but I didn\u2019t quite understand how frameworks like Vue worked and ended up with multiple Vue instances on a single page in an attempt to separate data. These instances included the main instance for the page, an instance for the coursework card, and an instance for the job entries card.</p>
<p>The <a href="${"https://joshuacastor.me/old-sites/v2/"}" rel="${"nofollow"}">website itself (External Link)</a>, which is Version 2 of the website, can still be accessed today as a way for me to see how far I\u2019ve come.</p>`;
});
var theSpaTreatmentAttempt1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": The_spa_treatment_attempt_1,
  metadata
});
export {init, render};
